<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>TS super data displayer</title></head>
<body>
<div id="Main" class="main">
  <div id="LanguageSelection" class="languageSelection">
    <div id="EN" class="language english" onclick="setLanguage(this)">English</div>
	<div id="FR" class="language french" onclick="setLanguage(this)">French</div>
  </div>
  <div id="InputFileArea" class="inputFileArea">
    <input type="file" id="files" name="files[]" multiple />
  </div>
  <div id="OperationSelection" class="operationSelection">
    <div id="Dump" class="operation dump" onclick="displayOutput(this)">Dump</div>
	<div id="Explore" class="operation explore" onclick="displayOutput(this)">Explore</div>
  </div>
  <div id="Output" class="allOutput">
    <div id="DumpOutput" class="output hidden" ></div>
    <div id="ExploreOutput" class="output hidden" ></div>
  </div>
</div>

<script type="text/javascript">

var _ItemBaseSkillData = {};
var _DungeonData = {};
var _ItemTypeData = {};
var _ItemBaseData = {};
var _SiteData = {};
var _SkillData = {};
var _TaskGroupData = {};
var _TaskData = {};
var _RecipeData = {};
var _RecipeIngredientData = {};
var _UnitTypeData = {};
var _UnitBaseData = {};
var _ImageData = {};
var _TerritoryData = {};
var _RegionData = {};
var _AreaWildlifeData = {};
var _AreaResourceData = {};
var _LandformData = {};
var _UnitBaseSkillData = {};
var _StoreData = {};
var _ResidentData = {};
var _ZoneData = {};

var _Language = 'EN';
var _CurrentOutput = '';

function handleFileSelect(evt) {
    var files = evt.target.files; // FileList object

    // files is a FileList of File objects. List some properties.
    var output = [];

    var file = files[0];
    var reader = new FileReader();

    // Closure to capture the file information.
    reader.onload = (function(theFile) {
        return function(e) {
		    ParseFile(e.target.result)
        };
    })(file);

    reader.readAsText(file);
}

document.getElementById('files').addEventListener('change', handleFileSelect, false);

function ParseFile(file) {
  var parser = new DOMParser();
  var xmlDoc = parser.parseFromString(file, "text/xml");

  var context = xmlDoc.getElementsByTagName("context")[0];

  // itemBaseSkillSet
  itemBaseSkillSet(context)

  // skillSet
  extractSkillSet(context)

  extractItemBaseSet(context)
}

function dumpItemBaseSkillData() {
    var result = "";
    for (var itemBaseSkillId in _ItemBaseSkillData) {
        var itemBaseSkill = _ItemBaseSkillData[itemBaseSkillId];
        result += '<ul>' + "id of element: &lt;" + itemBaseSkillId + "&gt; with value of: &lt;" + itemBaseSkill['value'] + "&gt; for skill: &lt;" + getNameEN(_SkillData[itemBaseSkill['skillId']]) + "&gt; on item: &lt;" + getItemBaseName(itemBaseSkill) + "&gt;" + '</ul>';
    }
    document.getElementById('DumpOutput').innerHTML = result;
}

function itemBaseSkillSet(context) {
    var itemBaseSkillSet = context.getElementsByTagName("itemBaseSkillSet")[0];
    var numberOfItem = itemBaseSkillSet.getAttribute("count");
    for (var i = 0; i < numberOfItem; i++) {
        var itemBaseSkillElement = itemBaseSkillSet.getElementsByTagName("itemBaseSkill")[i]

        var itemBaseSkill = {};
		
		var value = itemBaseSkillElement.getAttribute("value");
		if(value == null) { value = 0; }
        itemBaseSkill['value'] = value;
		
        itemBaseSkill['skillId'] = itemBaseSkillElement.getAttribute("skillId");
        itemBaseSkill['itemBaseId'] = itemBaseSkillElement.getAttribute("itemBaseId");
        itemBaseSkill['isProxy'] = itemBaseSkillElement.getAttribute("isProxy");

        _ItemBaseSkillData[itemBaseSkillElement.getAttribute("id")] = itemBaseSkill;
    }
}

function extractSkillSet(context) {
    var skillSet = context.getElementsByTagName("skillSet")[0];
    var numberOfItem = skillSet.getAttribute("count");
    for (var i = 0; i < numberOfItem; i++) {
        var skillElement = skillSet.getElementsByTagName("skill")[i]

        var skill = {};
        var nameElement = skillElement.getElementsByTagName("name")[0];

		extractName(skillElement, skill)
		
		var taskGroup = skillElement.getElementsByTagName("taskGroups")[0];
		var numberOfTasks = taskGroup.getAttribute("count");
		skill['task'] = [];
		for (var j = 0; j < numberOfTasks; j++) {
		  skill['task'][skill['task'].length] = taskGroup.getElementsByTagName("link")[j].getAttribute("id");
		}

        _SkillData[skillElement.getAttribute("id")] = skill;
    }
}



function extractItemBaseSet(context) {
    var itemBaseSet = context.getElementsByTagName("itemBaseSet")[0];
    var numberOfItem = itemBaseSet.getAttribute("count");
    for (var i = 0; i < numberOfItem; i++) {
        var itemBaseElement = itemBaseSet.getElementsByTagName("itemBase")[i]

        var itemBase = {};

		extractName(itemBaseElement, itemBase)

        _ItemBaseData[itemBaseElement.getAttribute("id")] = itemBase;
    }
}

function extractName(baseElement, mapItem) {
    var nameElement = baseElement.getElementsByTagName("name")[0];

	mapItem['nameFR'] = nameElement.getElementsByTagName("text")[0].childNodes[0].nodeValue;
    if (nameElement.getElementsByTagName("text").length == 1) {
        mapItem['nameEN'] = nameElement.getElementsByTagName("text")[0].childNodes[0].nodeValue;
		console.log("Missing English name for: " + mapItem['nameEN']);
    } else {
        mapItem['nameEN'] = nameElement.getElementsByTagName("text")[1].childNodes[0].nodeValue;
    }
    return mapItem;
}
//////////////////////
// Helper for display
//////////////////////

function setLanguage(button) {
  _Language = button.id;
  displayOperation();
}

function getItemBaseName(listSource) {
  if(_Language == 'FR')
  {
    return getNameFR(_ItemBaseData[listSource['itemBaseId']])
  }
  else
  {
    return getNameEN(_ItemBaseData[listSource['itemBaseId']])
  }
}

function getNameEN(dataElement) {
    return dataElement['nameEN'];
}

function getNameFR(dataElement) {
    return dataElement['nameFR'];
}

function displayOutput(origin) {
  hideAllOutput();
  _CurrentOutput = origin.id + 'Output';
  removeClass("hidden", document.getElementById(_CurrentOutput));
  
  displayOperation();
}

function displayOperation() {
  if(_CurrentOutput == "DumpOutput") { dumpItemBaseSkillData(); }
}

function hideAllOutput() {
  addClass("hidden", document.getElementById('DumpOutput'));
  addClass("hidden", document.getElementById('ExploreOutput'));
}


function addClass( classname, element ) {
    var cn = element.className;
    //test for existance
    if( cn.indexOf( classname ) != -1 ) {
    	return;
    }
    //add a space if the element already has class
    if( cn != '' ) {
    	classname = ' '+classname;
    }
    element.className = cn+classname;
}

function removeClass( classname, element ) {
    var cn = element.className;
    var rxp = new RegExp( "\\s?\\b"+classname+"\\b", "g" );
    cn = cn.replace( rxp, '' );
    element.className = cn;
}
</script>

<style type="text/css">
.hidden {
  display: none;
}

.inputFileArea {
  margin: 20px 0;
}

.operation, .language {
  display: inline;
  padding: 5px;
  border: solid 2px black;
  border-radius: 10px;
}
  </style>

</body></html>